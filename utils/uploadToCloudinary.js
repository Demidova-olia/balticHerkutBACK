const cloudinary = require("cloudinary").v2;
const streamifier = require("streamifier");

cloudinary.config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET,
});

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –±—É—Ñ–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Cloudinary.
 * @param {Buffer} buffer - –ë—É—Ñ–µ—Ä —Ñ–∞–π–ª–∞ (–ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ multer memoryStorage).
 * @param {string} filename - –ò–º—è —Ñ–∞–π–ª–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ public_id).
 * @returns {Promise<{url: string, public_id: string}>}
 */
const uploadToCloudinary = (buffer, filename) => {
  return new Promise((resolve, reject) => {
    console.log("üì¶ –ü—ã—Ç–∞—é—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤ Cloudinary —Ñ–∞–π–ª:", filename);

    const uploadStream = cloudinary.uploader.upload_stream(
      {
        folder: "products",
        public_id: filename,
        resource_type: "image",
        overwrite: true,
      },
      (error, result) => {
        if (error) {
          console.error("‚ùå Cloudinary upload error:", error);
          reject(error);
        } else {
          console.log("‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ Cloudinary:", result.secure_url);
          resolve({
            url: result.secure_url,
            public_id: result.public_id,
          });
        }
      }
    );

    // –ï—Å–ª–∏ buffer –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, —ç—Ç–æ —Ç–æ–∂–µ –Ω–∞–¥–æ –ª–æ–≤–∏—Ç—å
    if (!buffer) {
      console.error("‚ùó –ü—É—Å—Ç–æ–π –±—É—Ñ–µ—Ä, –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–≥—Ä—É–∂–∞—é –≤ Cloudinary.");
      reject(new Error("Buffer is empty or undefined"));
    } else {
      streamifier.createReadStream(buffer).pipe(uploadStream);
    }
  });
};

module.exports = { uploadToCloudinary };
